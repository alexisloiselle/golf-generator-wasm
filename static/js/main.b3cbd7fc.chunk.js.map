{"version":3,"sources":["useWasm/index.js","components/useWindowDimensions.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["WasmContext","createContext","WASM_READY_STATE","getWindowDimensions","_window","window","width","innerWidth","height","innerHeight","Main","wasm","_useContext","useContext","readyState","useLoadedWasm","_useWindowDimensions","_useState","useState","_useState2","Object","slicedToArray","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","useWindowDimensions","generate_course","course","setCourse","react_default","a","createElement","onClick","style","backgroundColor","position","top","left","outline","rough_outline","color","fairway_outline","map","_ref","i","key","viewBox","fill","xmlns","d","concat","p","y","x","join","App","_useWasm","wasmObject","setWasmObject","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","__webpack_require__","e","then","bind","sent","t0","console","error","stop","apply","this","arguments","loadWasm","Provider","useWasm","_useWasm2","WasmProvider","value","id","components_Main","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b3cbd7fc.chunk.js","sourcesContent":["import { createContext, useContext, useEffect, useState } from \"react\";\n\nexport const WasmContext = createContext();\nexport const WASM_READY_STATE = {\n  ERROR: -2,\n  NOT_READY: 0,\n  READY: 1,\n};\n\nexport const useWasm = () => {\n  const [wasmObject, setWasmObject] = useState({\n    wasm: null,\n    readyState: WASM_READY_STATE.NOT_READY,\n  });\n\n  useEffect(() => {\n    const loadWasm = async () => {\n      try {\n        const wasm = await import(\"wasm\");\n        setWasmObject({ wasm, readyState: WASM_READY_STATE.READY });\n      } catch (e) {\n        console.error(e);\n        setWasmObject({ wasm: null, readyState: WASM_READY_STATE.ERROR });\n      }\n    };\n\n    loadWasm();\n  }, []);\n\n  return [WasmContext.Provider, wasmObject];\n};\n\nexport const useLoadedWasm = () => {\n  const { wasm, readyState } = useContext(WasmContext);\n\n  return { wasm, readyState };\n};\n","import { useEffect, useState } from \"react\";\n\nfunction getWindowDimensions() {\n  const { innerWidth: width, innerHeight: height } = window;\n  return {\n    width,\n    height,\n  };\n}\n\nexport default function useWindowDimensions() {\n  const [windowDimensions, setWindowDimensions] = useState(\n    getWindowDimensions()\n  );\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  return windowDimensions;\n}\n","import React, { useState } from \"react\";\nimport { useLoadedWasm } from \"../useWasm\";\nimport useWindowDimensions from \"./useWindowDimensions\";\n\nconst Main = () => {\n  const { wasm } = useLoadedWasm();\n  const { width, height } = useWindowDimensions();\n  const [course, setCourse] = useState(wasm.generate_course());\n\n  const onClick = () => {\n    // Plus lent :(\n    setCourse(wasm.generate_course());\n  };\n\n  return (\n    <div\n      onClick={onClick}\n      style={{\n        backgroundColor: \"#6A953B\",\n        position: \"fixed\",\n        top: 0,\n        left: 0,\n        width: \"100vw\",\n        height: \"100vh\",\n      }}\n    >\n      {[\n        { outline: course.rough_outline, color: \"#90C656\" },\n        { outline: course.fairway_outline, color: \"#A5D368\" },\n      ].map(({ outline, color }, i) => (\n        <svg\n          style={{ position: \"fixed\", top: 0, left: 0 }}\n          key={i}\n          viewBox=\"0 0 780 780\"\n          width={width}\n          height={height}\n          fill={color}\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <path d={`M${outline.map((p) => `${p.y} ${p.x}`).join(\"L\")} Z`} />\n        </svg>\n      ))}\n    </div>\n  );\n};\n\nexport default Main;\n","import React from \"react\";\nimport Main from \"./components/Main\";\nimport { useWasm, WASM_READY_STATE } from \"./useWasm\";\n\nconst App = () => {\n  const [WasmProvider, wasmObject] = useWasm();\n\n  return (\n    <WasmProvider value={wasmObject}>\n      <div id=\"App\">\n        {wasmObject.readyState === WASM_READY_STATE.READY && <Main />}\n      </div>\n    </WasmProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}