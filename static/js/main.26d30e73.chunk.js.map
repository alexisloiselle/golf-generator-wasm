{"version":3,"sources":["useWasm/index.js","components/SpringComponent.js","components/useWindowDimensions.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["WasmContext","createContext","WASM_READY_STATE","SpringComponent","_ref","from","to","style","interpolator","interpolate","react_default","a","createElement","renderprops","reset","native","t","_ref2","path","d","getWindowDimensions","_window","window","width","innerWidth","height","innerHeight","getPolePath","point","concat","x","y","getFlagPath","getGreenPath","gX","gY","getHole","getTeePath","_ref3","teeX","teeY","getTee","_ref4","Main","wasm","_useContext","useContext","readyState","useLoadedWasm","_useWindowDimensions","_useState","useState","_useState2","Object","slicedToArray","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","useWindowDimensions","generate_svg_course","course","setCourse","previousCourse","value","ref","useRef","current","usePrevious","onClick","backgroundColor","position","top","left","rough_svg","prev","color","fairway_svg","green_center","tee_center","strokeWidth","stroke","fill","strokeLinejoin","map","_ref5","i","key","viewBox","xmlns","components_SpringComponent","App","_useWasm","wasmObject","setWasmObject","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","next","__webpack_require__","e","then","bind","sent","t0","console","error","stop","apply","this","arguments","loadWasm","Provider","useWasm","_useWasm2","WasmProvider","id","components_Main","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.26d30e73.chunk.js","sourcesContent":["import { createContext, useContext, useEffect, useState } from \"react\";\n\nexport const WasmContext = createContext();\nexport const WASM_READY_STATE = {\n  ERROR: -2,\n  NOT_READY: 0,\n  READY: 1,\n};\n\nexport const useWasm = () => {\n  const [wasmObject, setWasmObject] = useState({\n    wasm: null,\n    readyState: WASM_READY_STATE.NOT_READY,\n  });\n\n  useEffect(() => {\n    const loadWasm = async () => {\n      try {\n        const wasm = await import(\"wasm\");\n        setWasmObject({ wasm, readyState: WASM_READY_STATE.READY });\n      } catch (e) {\n        console.error(e);\n        setWasmObject({ wasm: null, readyState: WASM_READY_STATE.ERROR });\n      }\n    };\n\n    loadWasm();\n  }, []);\n\n  return [WasmContext.Provider, wasmObject];\n};\n\nexport const useLoadedWasm = () => {\n  const { wasm, readyState } = useContext(WasmContext);\n\n  return { wasm, readyState };\n};\n","import { interpolate } from \"flubber\";\nimport React from \"react\";\nimport { animated, Spring } from \"react-spring/renderprops\";\n\nconst SpringComponent = ({ from, to, style }) => {\n  const interpolator = interpolate(from, to);\n\n  return (\n    <Spring reset native from={{ t: 0 }} to={{ t: 1 }}>\n      {({ t }) => (\n        <animated.path style={style} d={t.interpolate(interpolator)} />\n      )}\n    </Spring>\n  );\n};\n\nexport default SpringComponent;\n","import { useEffect, useState } from \"react\";\n\nfunction getWindowDimensions() {\n  const { innerWidth: width, innerHeight: height } = window;\n  return {\n    width,\n    height,\n  };\n}\n\nexport default function useWindowDimensions() {\n  const [windowDimensions, setWindowDimensions] = useState(\n    getWindowDimensions()\n  );\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  return windowDimensions;\n}\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { useLoadedWasm } from \"../useWasm\";\nimport SpringComponent from \"./SpringComponent\";\nimport useWindowDimensions from \"./useWindowDimensions\";\n\nfunction usePrevious(value) {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\n\nconst getPolePath = (point) => `M ${point.x} ${point.y} l 0 -45`;\nconst getFlagPath = (point) => `M ${point.x} ${point.y - 45} l 18 6 l -18 6 z`;\nconst getGreenPath = ({ x: gX, y: gY }) =>\n  `M ${gX - 30} ${gY} a 30 30 0 1 0 60 0 a 30 30 0 1 0 -60 0`;\nconst getHole = ({ x: gX, y: gY }) =>\n  `M ${gX - 2.5} ${gY} a 2.5 2.5 0 1 0 5 0 a 2.5 2.5 0 1 0 -5 0`;\nconst getTeePath = ({ x: teeX, y: teeY }) =>\n  `M ${teeX - 20} ${teeY} a 20 20 0 1 0 40 0 a 20 20 0 1 0 -40 0`;\nconst getTee = ({ x: teeX, y: teeY }) =>\n  `M ${teeX - 5} ${teeY} a 5 5 0 1 0 10 0 a 5 5 0 1 0 -10 0`;\n\nconst Main = () => {\n  const { wasm } = useLoadedWasm();\n  const { width, height } = useWindowDimensions();\n  const [course, setCourse] = useState(wasm.generate_svg_course());\n  const previousCourse = usePrevious(course) || course;\n\n  const onClick = () => setCourse(wasm.generate_svg_course());\n  return (\n    <div\n      onClick={onClick}\n      style={{\n        backgroundColor: \"#6A953B\",\n        position: \"fixed\",\n        top: 0,\n        left: 0,\n        width: \"100vw\",\n        height: \"100vh\",\n      }}\n    >\n      {[\n        {\n          path: course.rough_svg,\n          prev: previousCourse.rough_svg,\n          color: \"#90C656\",\n        },\n        {\n          path: course.fairway_svg,\n          prev: previousCourse.fairway_svg,\n          color: \"#A5D368\",\n        },\n        {\n          path: getGreenPath(course.green_center),\n          prev: getGreenPath(previousCourse.green_center),\n          color: \"#B0DA74\",\n        },\n        {\n          path: getTeePath(course.tee_center),\n          prev: getTeePath(previousCourse.tee_center),\n          color: \"#B0DA74\",\n        },\n        {\n          path: getHole(course.green_center),\n          prev: getHole(previousCourse.green_center),\n          color: \"#416320\",\n        },\n        {\n          path: getTee(course.tee_center),\n          prev: getTee(previousCourse.tee_center),\n          color: \"#A5D368\",\n        },\n        {\n          path: getPolePath(course.green_center),\n          prev: getPolePath(previousCourse.green_center),\n          color: \"none\",\n          style: { strokeWidth: 2, stroke: \"black\" },\n        },\n        {\n          path: getFlagPath(course.green_center),\n          prev: getFlagPath(previousCourse.green_center),\n          color: \"none\",\n          style: { fill: \"#DD4D4B\" },\n        },\n        {\n          path: getFlagPath(course.green_center),\n          prev: getFlagPath(previousCourse.green_center),\n          color: \"none\",\n          style: { stroke: \"#DD4D4B\", strokeLinejoin: \"round\", strokeWidth: 2 },\n        },\n      ].map(({ path, prev, color, style }, i) => (\n        <svg\n          style={{ position: \"fixed\", top: 0, left: 0 }}\n          key={i}\n          viewBox=\"0 0 780 780\"\n          width={width}\n          height={height}\n          fill={color}\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <SpringComponent from={prev} to={path} style={style} />\n        </svg>\n      ))}\n    </div>\n  );\n};\n\nexport default Main;\n","import React from \"react\";\nimport Main from \"./components/Main\";\nimport { useWasm, WASM_READY_STATE } from \"./useWasm\";\n\nconst App = () => {\n  const [WasmProvider, wasmObject] = useWasm();\n\n  return (\n    <WasmProvider value={wasmObject}>\n      <div id=\"App\">\n        {wasmObject.readyState === WASM_READY_STATE.READY && <Main />}\n      </div>\n    </WasmProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}